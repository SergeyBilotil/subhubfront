{"version":3,"sources":["components/MainContent.js","components/MainHeader.js","components/Main.js","components/LastTable.js","components/LastItem.js","components/TopNav.js","App.js","serviceWorker.js","index.js"],"names":["MainContent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","city","venue","data","LoadMainData","bind","assertThisInitialized","e","_this2","preventDefault","setCity","target","value","setVenue","startDate","startdate","endDate","enddate","console","log","fetch","concat","then","res","json","result","setState","react_default","a","createElement","src_components_MainHeader","es","columns","Header","accessor","minWidth","width","defaultPageSize","className","React","Component","MainHeader","props","handleDateChange","FirstselectedDate","SecondselecteDate","date","_this$setState","defineProperty","format","handleChangeVenu","name","event","handleChange","Date","Listcities","ListVenues","items","prevState","_this3","cityname","items2","onSubmit","material_ui_pickers_esm","utils","MomentUtils","autoOk","variant","label","onChange","FormControl","InputLabel","shrink","htmlFor","NativeSelect","input","Input","id","map","item","key","Button","type","color","Icon","Main","src_components_MainContent","LastTable","lastvenue","eventId","LoadData","for","placeholder","inputProps","aria-label","LastItem","Lastchangevenu","src_components_LastTable","TabContainer","_ref","children","dir","Typography","component","TopNav","setValue","theme","useTheme","handleChangeIndex","newValue","index","AppBar","position","Tabs","indicatorColor","textColor","Tab","lib_default","axis","direction","onChangeIndex","Main_Main","components_LastItem","App","src_components_TopNav","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58b67f3c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport \"./MainContent.css\"\r\nimport MainHeader from './MainHeader'\r\n\r\nclass MainContent extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      city: '',\r\n      venue: '',\r\n      data: []\r\n    };\r\n    this.LoadMainData = this.LoadMainData.bind(this);\r\n  }\r\n\r\n  LoadMainData(e) {\r\n   e.preventDefault()\r\n    const setCity = e.target.city.value\r\n    const setVenue = e.target.venue.value\r\n    const startDate = e.target.startdate.value\r\n    const endDate = e.target.enddate.value\r\n    \r\n      console.log(setCity, setVenue)\r\n    \r\n     \r\n    \r\n     fetch(`https://stubhub.dataforest.tech/events?venue=${setVenue}&city=${setCity}&start_date=${startDate}&end_date=${endDate}`)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        \r\n        this.setState({\r\n          data: result,\r\n        \r\n        });\r\n        console.log(result)\r\n      });\r\n \r\n  }\r\n  \r\n  \r\n  render() {\r\n    const { data } = this.state;\r\n    \r\n    \r\n   \r\n    return (\r\n      <div >\r\n       <MainHeader LoadMainData={this.LoadMainData}/>\r\n        <ReactTable\r\n          \r\n     \r\n          data={data}\r\n          \r\n         \r\n          columns={[\r\n            {\r\n             \r\n              columns: [\r\n                {\r\n                  Header: \"City\",\r\n                  accessor: \"City\",\r\n                  \r\n                 \r\n                 \r\n                },\r\n                {\r\n                  Header: \"Date\",\r\n                  \r\n                  accessor: \"Date\",\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Time\",\r\n                  \r\n                  accessor: \"Time\",\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Name\", \r\n                  accessor: \"Name\",\r\n                  minWidth: 200,\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Performers\", \r\n                  accessor: \"Performers[0]\",\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Status\", \r\n                  accessor: \"Status\",\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Venue\", \r\n                  accessor: \"Venue\",\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Currency Code\", \r\n                  accessor: \"currencyCode\",\r\n                  width: 150\r\n                  \r\n                },\r\n\r\n                {\r\n                  Header: \"Max Price\", \r\n                  accessor: \"maxPrice\",\r\n                  width: 100\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Min Price\", \r\n                  accessor: \"minPrice\",\r\n                  width: 100\r\n                  \r\n                },\r\n                {\r\n                  Header: \"Total Tickets\", \r\n                  accessor: \"totalTickets\",\r\n                  width: 100\r\n                  \r\n                },\r\n                \r\n                \r\n\r\n              ]\r\n            },\r\n            \r\n            \r\n          ]}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n        <br />\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainContent\r\n","import React, { Component } from \"react\";\r\nimport './MainHeader.css'\r\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from \"@material-ui/pickers\";\r\nimport MomentUtils from '@date-io/moment';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport MainContent from \"./MainContent\";\r\n\r\n\r\nclass MainHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n      this.state = {\r\n        FirstselectedDate: new Date(\"2000-01-01\"),\r\n        SecondselecteDate: new Date(\"2050-01-01\"),\r\n        Listcities: [],\r\n        ListVenues: [],\r\n        city: '',\r\n        venue: '',\r\n        name: 'hai',\r\n      \r\n      }\r\n  }\r\n  componentDidMount() {\r\n    \r\n    fetch(`https://stubhub.dataforest.tech/cities`)\r\n    .then(res => res.json())\r\n    .then(\r\n      (items) => {\r\n        \r\n        this.setState({\r\n          Listcities: items,\r\n        \r\n        });\r\n        \r\n      });\r\n    \r\n  }\r\n  \r\n  componentDidUpdate(prevState ) {\r\n  \r\n    const cityname = this.state.city\r\n    if (this.state.city ) {\r\n    fetch(`https://stubhub.dataforest.tech/venues?city=${cityname}`)\r\n    .then(res => res.json())\r\n    .then(\r\n      (items2) => {\r\n        \r\n        this.setState({\r\n          ListVenues: items2,\r\n        \r\n        });\r\n        \r\n      });\r\n    }\r\n  }\r\n  handleDateChange = (FirstselectedDate,SecondselecteDate) => date=> {\r\n   \r\n    this.setState({\r\n      [FirstselectedDate]: date.format( \"MM-DD-YYYY\"),\r\n      [SecondselecteDate]: date.format( \"MM-DD-YYYY\")\r\n    })\r\n  }\r\n  handleChangeVenu = name => event => { \r\n    this.setState({\r\n      \r\n     \r\n      venue: '',\r\n      [name]: event.target.value,\r\n    });\r\n\r\n  };\r\n\r\n\r\n\r\n   handleChange = name => event => {\r\n    \r\n    this.setState({\r\n      \r\n      city: '',\r\n      \r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n  render() {\r\n  \r\n  const Listcities = this.state.Listcities\r\n  const ListVenues = this.state.ListVenues\r\n  \r\n  \r\n  return (\r\n    \r\n    <div className=\"main-content\">\r\n      <div className=\"main-header\">\r\n          <div className=\"wrapper\">\r\n            \r\n          <form onSubmit={this.props.LoadMainData}>\r\n    <MuiPickersUtilsProvider utils={MomentUtils} >\r\n    <KeyboardDatePicker\r\n        autoOk\r\n        name=\"startdate\"\r\n        variant=\"inline\"\r\n        label=\"Date from\"\r\n        format=\"MM-DD-YYYY\"\r\n        value={this.state.FirstselectedDate}\r\n        onChange={this.handleDateChange('FirstselectedDate')}\r\n      />\r\n\r\n<KeyboardDatePicker\r\n        autoOk\r\n        name=\"enddate\"\r\n        variant=\"inline\"\r\n        label=\"Date to\"\r\n        format=\"MM-DD-YYYY\"\r\n        value={this.state.SecondselecteDate}\r\n        onChange={this.handleDateChange('SecondselecteDate')}\r\n      />\r\n  </MuiPickersUtilsProvider>\r\n  <FormControl className=\"\" >\r\n        <InputLabel shrink htmlFor=\"age-native-label-placeholder\">\r\n          City\r\n        </InputLabel>\r\n        <NativeSelect\r\n          name=\"city\"\r\n          value={this.state.city}\r\n          onChange={this.handleChange('city')}\r\n          input={<Input name=\"city\" id=\"age-native-label-placeholder\" />}\r\n        >\r\n          <option>Change city</option>\r\n          {Listcities.map(item => (\r\n                <option key={item}>\r\n                  {item}\r\n                </option>\r\n              ))}\r\n        </NativeSelect>\r\n        \r\n      </FormControl>\r\n      <FormControl className=\"Location\">\r\n        <InputLabel shrink htmlFor=\"age-native-label-placeholder\">\r\n          Venue\r\n        </InputLabel>\r\n        <NativeSelect\r\n          name=\"venue\"\r\n          value={this.state.venue}\r\n          onChange={this.handleChangeVenu('venue')}\r\n          input={<Input name=\"venue\" id=\"age-native-label-placeholder\" />}\r\n        >\r\n          <option>Change venue</option>\r\n          {ListVenues.map(item => (\r\n                <option key={item.name}>\r\n                  {item.name}\r\n                </option>\r\n              ))}\r\n        </NativeSelect>\r\n        \r\n      </FormControl>\r\n      <Button  type=\"submit\" variant=\"contained\" color=\"primary\" className=\"button\">\r\n        Apply\r\n       \r\n        <Icon className=\"rightIcon\"> send</Icon>\r\n                </Button>\r\n      </form>\r\n             \r\n  </div>\r\n   \r\n  </div>\r\n  \r\n  </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default MainHeader\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport MainHeader from './MainHeader';\r\nimport MainContent from './MainContent';\r\n\r\nexport default class Main extends Component {\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n             \r\n           <MainContent />\r\n           \r\n            \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport \"./LastTable.css\"\nimport Input from '@material-ui/core/Input';\nimport { FormControl } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nclass LastTable extends Component {\n    constructor(props) {\n        super(props);\n          this.state = {\n            Listcities: [],\n          eventId: '',\n          lastvenue: '',\n          ListVenues: []\n          }\n      }\n      componentDidMount() {\n  \n        fetch(`https://stubhub.dataforest.tech/cities`)\n        .then(res => res.json())\n        .then(\n          (items) => {\n            \n            this.setState({\n              Listcities: items,\n            \n            });\n            \n          });\n        \n      }\n      componentDidUpdate(prevState ) {\n  \n        const cityname = this.state.lastvenue\n        if (this.state.lastvenue ) {\n        fetch(`https://stubhub.dataforest.tech/venues?city=${cityname}`)\n        .then(res => res.json())\n        .then(\n          (items2) => {\n            \n            this.setState({\n              ListVenues: items2,\n            \n            });\n            \n          });\n        }\n      }\n      handleChange = name => event => {\n    \n        this.setState({\n          \n          \n          lastvenue: '',\n          [name]: event.target.value,\n        });\n      };\n      handleChangeVenu = name => event => { \n        this.setState({\n          \n         \n          venue: '',\n          [name]: event.target.value,\n        });\n    \n      };\n    render() {\n      const Listcities= this.state.Listcities\n      const ListVenues = this.state.ListVenues\n        return(\n            <div >\n              <form onSubmit={this.props.LoadData}>\n               <div className=\"last-table\">\n                <div className=\"wrapper\"> \n                <FormControl className=\"\" >\n        \n        <NativeSelect\n          name=\"lastvenue\"\n          value={this.state.lastvenue}\n          onChange={this.handleChange('lastvenue')}\n          input={<Input name=\"lastvenue\" id=\"age-native-label-placeholder\" />}\n        >\n          <option>Select Venue</option>\n          {Listcities.map(item => (\n                <option  >\n                  {item}\n                </option>\n              ))}\n        </NativeSelect>\n        \n      </FormControl>\n      <FormControl className=\"Location\">\n       \n        <NativeSelect\n          name=\"venue\"\n          value={this.state.venue}\n          onChange={this.handleChangeVenu('venue')}\n          input={<Input name=\"venue\" id=\"age-native-label-placeholder\" />}\n        >\n          <option>Change venue</option>\n          {ListVenues.map(item => (\n                <option key={item.name}>\n                  {item.name}\n                </option>\n              ))}\n        </NativeSelect>\n        \n      </FormControl>\n                <FormControl>\n                <label for=\"first-input\">Event ID</label>\n                 <Input\n                 name=\"eventid\"\n                    placeholder=\"\"\n                    className=\"input\"\n                    inputProps={{\n                    'aria-label': 'Description',\n                    }}\n                />\n                </FormControl>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"button\">\n        Apply\n       \n        <Icon className=\"rightIcon\"> send</Icon>\n                </Button>\n                \n                </div>\n               </div>\n               </form>\n            </div>\n        )\n    }\n}\n\nexport default LastTable ","import React, { Component } from 'react'\nimport MainHeader from './MainHeader';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport LastTable from './LastTable';\n\n\nclass LastItem extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error: null,\n      city: '',\n      venue: '',\n      Listcities: '',\n      data: []\n    };\n    this.LoadData = this.LoadData.bind(this);\n  }\n  LoadData (e) {\n    e.preventDefault()\n    let Lastchangevenu = e.target.venue.value\n    \n    \n    \n    console.log(Lastchangevenu )\n    fetch(`https://stubhub.dataforest.tech/parse?venue=${Lastchangevenu}`)\n    .then(res => res.json())\n    .then(\n      (data) => {\n        \n        this.setState({\n          data: data,\n        \n        });\n        \n      });\n    \n  }\n  \n  render() {\n    const { data } = this.state;\n    \n    console.log(data)\n    return (\n      <div>\n        <LastTable  LoadData={this.LoadData}/>\n        <ReactTable \n          data={data}\n          \n         \n          columns={[\n            {\n             \n              columns: [\n                {\n                  Header: \"City\",\n                  accessor: \"City\",\n                  \n                 \n                 \n                },\n                {\n                  Header: \"Date\",\n                  \n                  accessor: \"Date\",\n                  \n                },\n                {\n                  Header: \"Name\", \n                  accessor: \"Name\",\n                  minWidth: 200,\n                  \n                },\n                {\n                  Header: \"Performers\", \n                  accessor: \"Performers[0]\",\n                  \n                },\n                {\n                  Header: \"Status\", \n                  accessor: \"Status\",\n                  \n                },\n                {\n                  Header: \"Venue\", \n                  accessor: \"Venue\",\n                  \n                },\n                {\n                  Header: \"Currency Code\", \n                  accessor: \"currencyCode\",\n                  width: 150\n                  \n                },\n\n                {\n                  Header: \"Max Price\", \n                  accessor: \"maxPrice\",\n                  width: 100\n                  \n                },\n                {\n                  Header: \"Min Price\", \n                  accessor: \"minPrice\",\n                  width: 100\n                  \n                },\n                {\n                  Header: \"Total Tickets\", \n                  accessor: \"totalTickets\",\n                  width: 100\n                  \n                },\n                \n                \n\n              ]\n            },\n            \n            \n          ]}\n          defaultPageSize={10}\n          className=\"-striped -highlight\"\n        />\n        <br />\n       \n      </div>\n    );\n  }\n}\n\nexport default LastItem\n","import React, { Component } from 'react'\nimport './TopNav.css'\nimport PropTypes from 'prop-types';\nimport SwipeableViews from 'react-swipeable-views';\nimport { useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Main from './Main';\nimport LastItem from './LastItem';\n\nfunction TabContainer({ children, dir }) {\n    return (\n      <Typography component=\"div\" >\n        {children}\n      </Typography>\n    );\n  }\n  TabContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n    dir: PropTypes.string.isRequired,\n  };\n  \n  \nclass TopNav extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            value: 0 ,\n            setValue: 0,\n            theme: useTheme,\n            \n        \n        }   \n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeIndex= this.handleChangeIndex.bind(this);\n            }\n\n\n            \n            handleChange(event, newValue) {\n               this.setState({value: newValue});\n              }\n            handleChangeIndex(index) {\n                this.setState({value: index})\n              }\n    render() {\n        \n        return (\n            <div className=\"root\">\n            <AppBar position=\"static\" color=\"default\">\n              <Tabs\n                value={this.state.value}\n                onChange={this.handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"fullWidth\"\n              >\n                <Tab label=\"Item One\" />\n                <Tab label=\"Item Two\" />\n                <Tab label=\"Item Three\" />\n              </Tabs>\n            </AppBar>\n            <SwipeableViews\n              axis={this.state.theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n              index={this.state.value}\n              onChangeIndex={this.handleChangeIndex}\n            >\n              <TabContainer dir={this.state.theme.direction}><Main /></TabContainer>\n              <TabContainer dir={this.state.theme.direction}></TabContainer>\n              <TabContainer dir={this.state.theme.direction}><LastItem /></TabContainer>\n            </SwipeableViews>\n          </div>\n        );\n      }\n        \n    \n}\n\nexport default TopNav","import React from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport Main from './components/Main'\nimport TopNav from './components/TopNav';\n\n\nfunction App() {\n  return (\n    <div>\n      <TopNav /> \n    \n \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}